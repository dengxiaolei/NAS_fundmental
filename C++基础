


 ##C++设计中阶（主讲师应用分发事业部李青鑫）
 1.进程、线程、编程模式、网络、安全
 
 top命令查看linux进程
 
 进程和程序之间的区别：程序是一个静态的指令序列、集合；进程是一个容器包含了执行一个程序的特定实例所用到的各种资源（栈，堆等）；
 进程的特点：1.可执行的程序，可执行的二进制代码；
             2.进程的权限，进程的运行权限；
             3.私有的线性地址空间，可以使用线性地址范围；
             4.进程描述，包含操作该进程的一些必要的信息，比如进程的ID号；
             5.一些已经获得的资源，比如打开的文件、管道等；
 
 创建进程的方法：
        pid_tfork()         //创建成功时返回两次：父进程返回>0,子进程返回==0
        int execl(const char  *path,  const char *arg,  ...)
        int execlp(const  char  *file,  const char  *arg, ...)
        int execle(const  char  *path,  const  char  *arg, ...,  char  *const  envp[]);
        int execv(const char  *file,  char  *const  arg[]);
        int execvp(const  char  *file,  char  *constargv[]);
        int execvpe(const char  *file,  char  *const  argv[], char  *const  envp[]);
        
        FILE  *popen(const  char  *command, const char  *type); //可以获取命令的输出结果,建立一个管道
        
        int system(const  char  *command);//
        
  案例分析：
int main(){
	pid_t pd;
	int ret = 1;
	int status;
	pid = fork();
	if (pid == -1){
		printf("1 can't fork, error occured\n");
		exit(EXIT_FAILURE);
	} else if(pid == 0){
		printf("2 child process. pid = %U\n", getpid());
		char *argv_list[] = {"ls", "-1h", "/tmp/mysql.sock", NULL};
		int ret = execv("/usr/bin/ls",argv_list);
		printf("execv ret:", ret);
		exit(0);
  
	} else{
		printf("3 parent process, pid = %U\n",getpid());
		if(waitpid(pid, &status, 0)>0){
			if(WIFEXITTED(status) && !WEXITSTATUS(status)){
				printf("4 program execution successful\n");
				else if(WIFEXITTED(status) && WEXITSTATUS(status)){
					if(WIFEXITTED(status) == 127){
						printf("5 execv failed\n");
					}else{
						printf("6 program terminated normally. but return a non-zero status\n");
					}
				}else{
					print("7 program didn't terminate normally\n");
				}
		}else{
				printf("8 waitpid() failed\n");
		}
		exit(0);
	}
    return 0;
}

进程间通信的7种方式：
管道(pipe)：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。
命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。
消息队列MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少管道只能承载无格式的字符流以及缓冲区大小受限等缺点。
套接字Socket：套接字也是一种进程间通信机制，与其他通信机制不同的是，他可以用于不同及期间的进程通信。
共享存储shareMemory：共享内存就是映射一段能被其他进程访问的内存，这段共享内存由一个进程创建，但是多个进程可以访问。共享内存是最快的IPC方式，它是针对其它进程间通信方式运行效率低
                    而专门设计的。它往往与其它通信机制配合使用实现进程间的同步和异步通信。
信号量semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问资源时，其它进程也访问该资源。因此，主要作为进程间以及同一进程
                 内不同进程之间的同步手段。
信号signal：信号是一种比较复杂的通信方式，用于通知接受进程，线程某个事件的发生。

详细介绍：https://blog.csdn.net/zhaohong_bo/article/details/89552188






            
 
 
 
 
